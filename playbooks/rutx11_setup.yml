---
# Setup of RUTX11 device after firmware update (some setting dissapear)
# Pawelo 20220514 added diffutils package installation
# Pawelo 20220515 fix1 for opkg status = 1 when opkg failed, RC=0 - ok (no errors), RC=1 - failed (some packages are missing) - skipping/continue
# TODO change skipping/continue to decision made by operator if we need to continue
# Pawelo 20220515 fix2 for collectd checking if modules installed - use /usr/lib/collectd/*.so instead of usr/lib/lua/luci/statistics/plugins/*.lua
# Pawelo 20220515 fix3 added 2>&1 to all commands to have all output displayed

# * it installs:
# * HAProxy, iperf3, diffutils, collectd + mods,
# * luci_statistics (with special exec showing GSM signal strenght and temperature, vnstat, bandwidthd
# * vnstat, bandwidthd
# * /etc/sysupgrade.conf (to preserve config files)

# TODO: Modify Teltonika skin to customize for statistics menu (copy icons and style.css)

- name: Setup rutx11 after firmware update
  hosts: 192.168.1.1
  gather_facts: false
  vars:
    data_folder: "/data"
    data_path: "/mnt/sda1"
    opkg_path: "/tmp/opkg-lists"
    iperf3_package: "iperf3"
    iperf3_path: "/usr/bin/iperf3"
    diff_package: "diffutils"
    diff_path: "/usr/bin/diff"
    haproxy_package: "haproxy"
    haproxy_path: "/etc/init.d/haproxy"
    haproxy_enabled_path: "/etc/rc.d/S99haproxy"
    haproxy_config_path: "/etc/haproxy.conf"
    collectd_package: "collectd"
    collectd_path: "/etc/init.d/collectd"
    collectd_enabled_path: "/etc/rc.d/S80collectd"
    collectd_config_path: "/etc/collectd.conf"
    collectd_mod1_path: "/usr/lib/collectd/cpu.so"
#    collectd_mod1_path: "/usr/lib/lua/luci/statistics/plugins/cpu.lua"
    collectd_modx_path: "/usr/lib/collectd/df.so"
#    collectd_modx_path: "/usr/lib/lua/luci/statistics/plugins/df.lua"
    luci_statistics_package: "luci-app-statistics"
    luci_statistics_path: "/etc/init.d/luci_statistics"
    luci_statistics_enabled_path: "/etc/rc.d/S79luci_statistics"
    # ? luci_statistics_config_path in /etc/config and backed out automatically
    vnstat_package: "vnstat luci-app-vnstat"
    vnstat_path: "/etc/init.d/vnstat"
    vnstat_config_path: "/etc/vnstat.conf"
    vnstat_data_path: "/mnt/sda1/vnstat"  # ! not used
    vnstat_enabled_path: "/etc/rc.d/S99vnstat"
    bandwidthd_package: "bandwidthd-sqlite"
    bandwidthd_path: "/etc/init.d/bandwidthd"
    bandwidthd_config_path: "/etc/bandwidthd.conf"
    bandwidthd_data_path: "/mnt/sda1/bandwidthd"  # ! not used
    bandwidthd_enabled_path: "/etc/rc.d/S99bandwidthd"

    # variables for additional script of monitoring of signal strenght and device temperature
    gsmctl_path: "/usr/sbin/gsmctl"
    # gsmkpi script collects data, it uses gsmctl; but for collectd tu run it the gsmctl must be runable as root
    gsmkpi_path: "/bin/gsmkpi"
    # LUA exec script path for exec module display of gsmkpi results
    luci_statistics_exec_lua_path: "/usr/lib/lua/luci/statistics/rrdtool/definitions/exec.lua"

    # sysupgrade_config_path: "/root/sysupgrade.conf"
    sysupgrade_config_path: "/etc/sysupgrade.conf"
    sysupgrade_config_preserve_paths:
      - "/etc/sudoers"
      - "/etc/dropbear/authorized_keys"

  tasks:
    - name: Show the device details
      raw: uname -a 2>&1
      changed_when: false
      register: conn_status
    - name: Show the device details - debug
      debug: verbosity=0 msg="{{ conn_status.stdout_lines.0 }}"

    - name: Link {{ data_folder }} as {{ data_path }} (makes symbolic link if folder exists)
      # If link do not exists then make a link
      raw: >
        [[ ! -L {{ data_folder }} ]] && [[ -d {{ data_path }} ]] &&
        ln -s {{ data_path }} {{ data_folder }} 2>&1
      register: link_status
      changed_when: link_status.rc == 0
      failed_when: link_status.rc > 1
    - name: Link {{ data_folder }} as {{ data_path }} - debug
      debug: msg="{{ link_status.stdout_lines }}"
      when: link_status.rc > 1

    - name: Update repos for OpenWRT (OPKG update)
      raw: "[[ ! -d {{ opkg_path }} ]] && opkg update 2>&1"
      register: opkg_update_status
      changed_when: opkg_update_status.rc <= 1
      failed_when: opkg_update_status.rc > 1
    - name: Show OPKG update status
      debug: msg="{{ opkg_update_status.stdout_lines }}"
      # when: opkg_update_status.rc != -1

    # Install iperf3
    - name: Install iperf3 (network speed testing tool)
      raw: "[[ ! -x  {{ iperf3_path }} ]] && opkg install {{ iperf3_package }} 2>&1"
      register: iperf3_status
      changed_when: iperf3_status.rc == 0
      failed_when: iperf3_status.rc > 1
    - name: Show installation status - iperf3
      debug: msg="{{ iperf3_status.stdout_lines }}"
      when: iperf3_status.rc != 1

    # Install diff and diff3
    - name: Install diff and diff3 (file and folder comparation tools)
      raw: "[[ ! -x  {{ diff_path }} ]] && opkg install {{ diff_package }} 2>&1"
      register: diff_status
      changed_when: diff_status.rc == 0
      failed_when: diff_status.rc > 1
    - name: Show installation status - diff and diff3
      debug: msg="{{ diff_status.stdout_lines }}"
      when: diff_status.rc != 1

      # Install HAProxy
    - name: Install HAProxy (TCP/HTTP load-balancer)
      raw: "[[ ! -x  {{ haproxy_path }} ]] && opkg install {{ haproxy_package }} 2>&1"
      register: haproxy_status
      changed_when: haproxy_status.rc == 0
      failed_when: haproxy_status.rc > 1
    - name: Show installation status - HAProxy
      debug: msg="{{ haproxy_status.stdout_lines }}"
      when: haproxy_status.rc != 1
    - name: Set {{ haproxy_config_path }} on paths to preserve next restore/upgrade
      set_fact:
        sysupgrade_config_preserve_paths: "{{ sysupgrade_config_preserve_paths + [haproxy_config_path] }}"

    - name: Enable HAProxy at boot and start it
      raw: "[[ ! -L {{ haproxy_enabled_path }} ]] && {{ haproxy_path }} enable && {{ haproxy_path }} start 2>&1"
      register: haproxy_enabled_status
      changed_when: haproxy_enabled_status.rc == 0
      failed_when: haproxy_enabled_status.rc > 1
    - name: Show installation status - HAProxy start and enable at start
      debug: msg="{{ haproxy_enabled_status.stdout_lines }}"
      when: haproxy_enabled_status.rc != 1

    - name: "*** Install statistics"
      block:

      - name: Correct permissions for gsmctl to eliminate need for SUDO
        raw: "[[ -x {{ gsmctl_path }} ]] && [[ ! -u {{ gsmctl_path }} ]] && chmod +s {{ gsmctl_path }} 2>&1"
        register: gsmctl_status
        changed_when: gsmctl_status.rc == 0
        failed_when: gsmctl_status.rc > 1
      - name: Show gsmctl set permission status
        debug: msg="{{ gsmctl_status.stdout_lines }}"
        when: gsmctl_status.rc > 1

      # Install CollectD and modules
      - name: Install CollectD tool
        raw: "[[ ! -x {{ collectd_path }} ]] && opkg install {{ collectd_package }} 2>&1"
        register: collectd_status
        changed_when: collectd_status.rc == 0
        failed_when: collectd_status.rc > 1
      - name: Show installation status - CollectD
        debug: msg="{{ collectd_status.stdout_lines }}"
        when: collectd_status.rc != 1
      - name: Set {{ collectd_config_path }} on paths to preserve next restore/upgrade
        set_fact:
          sysupgrade_config_preserve_paths: "{{ sysupgrade_config_preserve_paths + [collectd_config_path] }}"

      - name: Install CollectD basic modules (cpu, memory, rrdtool, ...)
        raw: >
          [[ ! -f {{ collectd_mod1_path }} ]] &&
          opkg install
          collectd-mod-cpu
          collectd-mod-interface
          collectd-mod-memory
          collectd-mod-ping
          collectd-mod-rrdtool
          collectd-mod-wireless
          collectd-mod-iwinfo
          collectd-mod-load
          2>&1
        register: collectd_mod1_status
        changed_when: collectd_mod1_status.rc == 0
        failed_when: collectd_mod1_status.rc > 1
      - name: Show installation status - CollectD basic modules
        debug: msg="{{ collectd_mod1_status.stdout_lines }}"
        when: collectd_mod1_status.rc != 1

      - name: Install CollectD extended modules (csv, df, exec, ...)
        raw: >
          [[ ! -f {{ collectd_modx_path }} ]] &&
          opkg install
          collectd-mod-csv
          collectd-mod-curl
          collectd-mod-df
          collectd-mod-disk
          collectd-mod-dns
          collectd-mod-exec
          collectd-mod-filecount
          collectd-mod-match-regex
          collectd-mod-mqtt
          collectd-mod-netlink
          collectd-mod-ping
          collectd-mod-protocols
          collectd-mod-snmp
          collectd-mod-table
          collectd-mod-tcpconns
          collectd-mod-uptime
          collectd-mod-write-http
          collectd-mod-logfile
          collectd-mod-syslog
          collectd-mod-network
          2>&1
        register: collectd_modx_status
        changed_when: collectd_modx_status.rc == 0
        failed_when: collectd_modx_status.rc > 1
      - name: Show installation status - CollectD extended modules
        debug: msg="{{ collectd_modx_status.stdout_lines }}"
        when: collectd_modx_status.rc != 1

      # Install EXEC module
      - name: Check if {{ gsmkpi_path }} command exists
        raw: "[[ -f {{ gsmkpi_path }} ]]"
        register: gsmkpi_status
        changed_when: false
        failed_when: gsmkpi_status.rc > 1
      - name: Set {{ gsmkpi_path }} on paths to preserve next restore/upgrade
        set_fact:
          sysupgrade_config_preserve_paths: "{{ sysupgrade_config_preserve_paths + [gsmkpi_path] }}"
        when: gsmkpi_status.rc == 0

      - name: Check if {{ luci_statistics_exec_lua_path }} script exists
        raw: "[[ -f {{ luci_statistics_exec_lua_path }} ]]"
        register: lua_status
        changed_when: false
        failed_when: lua_status.rc > 1
      - name: Set {{ luci_statistics_exec_lua_path }} on paths to preserve next restore/upgrade
        set_fact:
          sysupgrade_config_preserve_paths: "{{ sysupgrade_config_preserve_paths + [luci_statistics_exec_lua_path] }}"
        when: lua_status.rc == 0

      - name: Enable CollectD at boot and start it
        raw: "[[ ! -L {{ collectd_enabled_path }} ]] && {{ collectd_path }} enable && {{ collectd_path }} start 2>&1"
        register: collectd_enabled_status
        changed_when: collectd_enabled_status.rc == 0
        failed_when: collectd_enabled_status.rc > 1
      - name: Show installation status - CollectD start and enable at start
        debug: msg="{{ collectd_enabled_status.stdout_lines }}"
        when: collectd_enabled_status.rc != 1

      # Install LUCI Statistics
      - name: Install LUCI Statistics (CollectD tool web interface)
        raw: "[[ ! -x {{ luci_statistics_path }} ]] && opkg install --nodeps {{ luci_statistics_package }} 2>&1"
        register: luci_statistics_status
        changed_when: luci_statistics_status.rc == 0
        failed_when: luci_statistics_status.rc > 1
      - name: Show installation status - LUCI Statistics
        debug: msg="{{ luci_statistics_status.stdout_lines }}"
        when: luci_statistics_status.rc != 1

      # TODO: Modify Teltonika skin to customize for statistics menu (copy icons and style.css)
      - name: Enable LUCI Statistics at boot and start it
        raw: "[[ ! -L {{ luci_statistics_enabled_path }} ]] && {{ luci_statistics_path }} enable && {{ luci_statistics_path }} start 2>&1"
        register: luci_statistics_enabled_status
        changed_when: luci_statistics_enabled_status.rc == 0
        failed_when: luci_statistics_enabled_status.rc > 1
      - name: Show installation status - LUCI Statistics start and enable at start
        debug: msg="{{ luci_statistics_enabled_status.stdout_lines }}"
        when: luci_statistics_enabled_status.rc != 1

      # Install VNStat
      - name: Install VNStat (collecting/monitoring GSM/LTE data plan)
        raw: "[[ ! -x {{ vnstat_path }} ]] && opkg install --nodeps {{ vnstat_package }} 2>&1"
        register: vnstat_status
        changed_when: vnstat_status.rc == 0
        failed_when: vnstat_status.rc > 1
      - name: Show installation status - VNStat
        debug: msg="{{ vnstat_status.stdout_lines }}"
        when: vnstat_status.rc != 1
      - name: Set {{ vnstat_config_path }} on paths to preserve next restore/upgrade
        set_fact:
          sysupgrade_config_preserve_paths: "{{ sysupgrade_config_preserve_paths + [vnstat_config_path] }}"


      - name: Enable VNStat at boot and start it
        raw: "[[ ! -L {{ vnstat_enabled_path }} ]] && {{ vnstat_path }} enable && {{ vnstat_path }} start 2>&1"
        register: vnstat_enabled_status
        changed_when: vnstat_enabled_status.rc == 0
        failed_when: vnstat_enabled_status.rc > 1
      - name: Show installation status - VNStat start and enable at start
        debug: msg="{{ vnstat_enabled_status.stdout_lines }}"
        when: vnstat_enabled_status.rc != 1

      # Install BandwidthD
      - name: Install BandwidthD (collecting/monitoring summary of traffic data by IP daily/weekly/monthly/yearly)
        raw: "[[ ! -x {{ bandwidthd_path }} ]] && opkg install --nodeps {{ bandwidthd_package }} 2>&1"
        register: bandwidthd_status
        changed_when: bandwidthd_status.rc == 0
        failed_when: bandwidthd_status.rc > 1
      - name: Show installation status - BandwidthD
        debug: msg="{{ bandwidthd_status.stdout_lines }}"
        when: bandwidthd_status.rc != 1
      - name: Set {{ bandwidthd_config_path }} on paths to preserve next restore/upgrade
        set_fact:
          sysupgrade_config_preserve_paths: "{{ sysupgrade_config_preserve_paths + [bandwidthd_config_path] }}"

      - name: Enable BandwidthD at boot and start it
        raw: "[[ ! -L {{ bandwidthd_enabled_path }} ]] && {{ bandwidthd_path }} enable && {{ bandwidthd_path }} start 2>&1"
        register: bandwidthd_enabled_status
        changed_when: bandwidthd_enabled_status.rc == 0
        failed_when: bandwidthd_enabled_status.rc > 1
      - name: Show installation status - BandwidthD start and enable at start
        debug: msg="{{ bandwidthd_enabled_status.stdout_lines }}"
        when: bandwidthd_enabled_status.rc != 1

    - name: Ensure list of files is preserved for next upgrades
      block:

      - name: Set timestamp for backup files
        raw: "date +'%Y-%m-%d_%H%M%S' 2>&1"
        register: backup_file_timestamp
        changed_when: false
        failed_when: false
      - name: Clean timestamp
        set_fact:
          backup_file_timestamp="_ansible_backup_{{ backup_file_timestamp.stdout_lines.0 }}" timestamp="{{ backup_file_timestamp.stdout_lines.0 }}"
      # - name: Show timestamp for backup files
      #   debug: msg="{{ backup_file_timestamp }}"

      - name: Create blank {{ sysupgrade_config_path }} if the file not exists
        raw: >
          [[ ! -f {{ sysupgrade_config_path }} ]] &&
          echo '## This file contains files and directories that should be preserved during an upgrade.' >> {{ sysupgrade_config_path }} &&
          echo '## Created vi Ansible playbook at: {{ timestamp }}' >> {{ sysupgrade_config_path }}
        register: sysupgrade_blank_status
        changed_when: sysupgrade_blank_status.rc == 0
        failed_when: sysupgrade_blank_status.rc > 1

      - name: Make backup of {{ sysupgrade_config_path }}
        raw: "[[ -f {{ sysupgrade_config_path }} ]] && cp {{ sysupgrade_config_path }} {{ sysupgrade_config_path }}{{ backup_file_timestamp }} 2>&1"
        register: sysupgrade_backup_status
        changed_when: false
        failed_when: sysupgrade_backup_status.rc > 1

      - name: Recognize which are symbolic links and source files needs to be added to {{ sysupgrade_config_path }}
        raw: >
          [[ -L {{ item  }} ]] &&
          readlink -n {{ item }}
          2>&1
        register: sysupgrade_config_preserve_links
        changed_when: false
        failed_when: sysupgrade_config_preserve_links.rc > 1
        with_items: "{{ sysupgrade_config_preserve_paths }}"

      - name: Adding source files from links to add to {{ sysupgrade_config_path }}
        set_fact:
          sysupgrade_config_preserve_paths: "{{ sysupgrade_config_preserve_paths + [item.stdout] }}"
        when: item.stdout|length > 0
        with_items: "{{ sysupgrade_config_preserve_links.results }}"
        loop_control:
          label: "{{ item.stdout }}"

      - name: Adding missing files to preserve in {{ sysupgrade_config_path }}
        raw: >
          [[ -f {{ sysupgrade_config_path }} ]] &&
          ! grep -q '^{{ item }}$' {{ sysupgrade_config_path }} &&
          echo '{{ item }}' >> {{ sysupgrade_config_path }}
          2>&1
        register: sysupgrade_preserve_status
        changed_when: sysupgrade_preserve_status.rc == 0
        failed_when: sysupgrade_preserve_status.rc > 1
        with_items: "{{ sysupgrade_config_preserve_paths }}"
        loop_control:
          label: "{{ item }}"
      # - name: Show added files to {{ sysupgrade_config_path }}
      #   debug:
      #     var: sysupgrade_preserve_status

      - name: Preserve backup of {{ sysupgrade_config_path }}{{ backup_file_timestamp }} if changes were made
        raw: >
          [[ -f {{ sysupgrade_config_path }}{{ backup_file_timestamp }} ]] &&
          cmp -s {{ sysupgrade_config_path }} {{ sysupgrade_config_path }}{{ backup_file_timestamp }} &&
          rm {{ sysupgrade_config_path }}{{ backup_file_timestamp }}
          2>&1
        register: sysupgrade_backup_remove_status
        changed_when: sysupgrade_backup_remove_status.rc == 1
        failed_when: sysupgrade_backup_remove_status.rc > 1
